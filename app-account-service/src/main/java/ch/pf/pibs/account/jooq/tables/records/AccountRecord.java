/*
 * This file is generated by jOOQ.
 */
package ch.pf.pibs.account.jooq.tables.records;


import ch.pf.pibs.account.jooq.tables.Account;
import ch.pf.pibs.account.jooq.tables.pojos.AccountDto;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AccountRecord extends UpdatableRecordImpl<AccountRecord> implements Record3<Long, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.account.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.account.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.account.account_type</code>.
     */
    public void setAccountType(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.account.account_type</code>.
     */
    public String getAccountType() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.account.account_owner</code>.
     */
    public void setAccountOwner(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.account.account_owner</code>.
     */
    public String getAccountOwner() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Account.ACCOUNT.ID;
    }

    @Override
    public Field<String> field2() {
        return Account.ACCOUNT.ACCOUNT_TYPE;
    }

    @Override
    public Field<String> field3() {
        return Account.ACCOUNT.ACCOUNT_OWNER;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getAccountType();
    }

    @Override
    public String component3() {
        return getAccountOwner();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getAccountType();
    }

    @Override
    public String value3() {
        return getAccountOwner();
    }

    @Override
    public AccountRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public AccountRecord value2(String value) {
        setAccountType(value);
        return this;
    }

    @Override
    public AccountRecord value3(String value) {
        setAccountOwner(value);
        return this;
    }

    @Override
    public AccountRecord values(Long value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountRecord
     */
    public AccountRecord() {
        super(Account.ACCOUNT);
    }

    /**
     * Create a detached, initialised AccountRecord
     */
    public AccountRecord(Long id, String accountType, String accountOwner) {
        super(Account.ACCOUNT);

        setId(id);
        setAccountType(accountType);
        setAccountOwner(accountOwner);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised AccountRecord
     */
    public AccountRecord(AccountDto value) {
        super(Account.ACCOUNT);

        if (value != null) {
            setId(value.getId());
            setAccountType(value.getAccountType());
            setAccountOwner(value.getAccountOwner());
            resetChangedOnNotNull();
        }
    }
}
